"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const interviewerRepository_1 = require("../../infrastructure/database/repositories/interviewerRepository");
const userRepository_1 = require("../../infrastructure/database/repositories/userRepository");
const submitVerificationUseCase_1 = require("../../application/use-cases/interviewer/submitVerificationUseCase");
const interviewer_controller_1 = require("../controllers/interviewer/interviewer.controller");
const authMiddleware_1 = require("../middleware/authMiddleware");
const roleMiddleware_1 = require("../middleware/roleMiddleware");
const combinedUpload_1 = require("../middleware/combinedUpload");
const getVerificationStatusUseCase_1 = require("../../application/use-cases/interviewer/getVerificationStatusUseCase");
const getInterviewerProfileUseCase_1 = require("../../application/use-cases/interviewer/getInterviewerProfileUseCase");
const updateInterviewerProfileUseCase_1 = require("../../application/use-cases/interviewer/updateInterviewerProfileUseCase");
const getInterviewerBookingsUseCase_1 = require("../../application/use-cases/interviewer/getInterviewerBookingsUseCase");
const saveSlotRuleUseCase_1 = require("../../application/use-cases/interviewer/saveSlotRuleUseCase");
const getSlotRuleUseCase_1 = require("../../application/use-cases/interviewer/getSlotRuleUseCase");
const slotRuleRepository_1 = require("../../infrastructure/database/repositories/slotRuleRepository");
const bookingRepository_1 = require("../../infrastructure/database/repositories/bookingRepository");
const walletRepository_1 = require("../../infrastructure/database/repositories/walletRepository");
const getWalletSummaryUseCase_1 = require("../../application/use-cases/wallet/getWalletSummaryUseCase");
const listWalletTransactionsUseCase_1 = require("../../application/use-cases/wallet/listWalletTransactionsUseCase");
const feedbackRepository_1 = require("../../infrastructure/database/repositories/feedbackRepository");
const submitFeedbackUseCase_1 = require("../../application/use-cases/interviewer/submitFeedbackUseCase");
const listInterviewerFeedbacksUseCase_1 = require("../../application/use-cases/interviewer/listInterviewerFeedbacksUseCase");
const getInterviewerFeedbackByIdUseCase_1 = require("../../application/use-cases/interviewer/getInterviewerFeedbackByIdUseCase");
const getUserRatingByBookingIdUseCase_1 = require("../../application/use-cases/interviewer/getUserRatingByBookingIdUseCase");
const getInterviewerDashboardUseCase_1 = require("../../application/use-cases/interviewer/getInterviewerDashboardUseCase");
const changePasswordUseCase_1 = require("../../application/use-cases/auth/changePasswordUseCase");
const deleteAccountUseCase_1 = require("../../application/use-cases/auth/deleteAccountUseCase");
const notificationPublisher_1 = require("../socket/notificationPublisher");
const router = express_1.default.Router();
router.use(authMiddleware_1.authenticateToken, roleMiddleware_1.requireInterviewer);
const userRepository = new userRepository_1.UserRepository();
const interviewerRespository = new interviewerRepository_1.InterviewerRepository();
const slotRuleRepository = new slotRuleRepository_1.SlotRuleRepository();
const bookingRepository = new bookingRepository_1.BookingRepository();
const walletRepository = new walletRepository_1.WalletRepository();
const feedbackRepository = new feedbackRepository_1.FeedbackRepository();
const submitVerificationUseCase = new submitVerificationUseCase_1.SubmitVerificationUseCase(userRepository, interviewerRespository);
const getVerificationStatusUseCase = new getVerificationStatusUseCase_1.GetVerificationStatusUseCase(userRepository, interviewerRespository);
const getInterviewerProfileUseCase = new getInterviewerProfileUseCase_1.GetInterviewerProfileUseCase(userRepository, interviewerRespository);
const updateInterviewerProfileUseCase = new updateInterviewerProfileUseCase_1.UpdateInterviewerProfileUseCase(userRepository, interviewerRespository);
const saveSlotRuleUseCase = new saveSlotRuleUseCase_1.SaveSlotRuleUseCase(slotRuleRepository);
const getSlotRuleUseCase = new getSlotRuleUseCase_1.GetSlotRuleUseCase(slotRuleRepository);
const getInterviewerBookingsUseCase = new getInterviewerBookingsUseCase_1.GetInterviewerBookingsUseCase(bookingRepository, userRepository);
const getWalletSummaryUseCase = new getWalletSummaryUseCase_1.GetWalletSummaryUseCase(walletRepository);
const listWalletTransactionsUseCase = new listWalletTransactionsUseCase_1.ListWalletTransactionsUseCase(walletRepository);
const submitFeedbackUseCase = new submitFeedbackUseCase_1.SubmitFeedbackUseCase(feedbackRepository, bookingRepository);
const listInterviewerFeedbacksUseCase = new listInterviewerFeedbacksUseCase_1.ListInterviewerFeedbacksUseCase(feedbackRepository);
const getInterviewerFeedbackByIdUseCase = new getInterviewerFeedbackByIdUseCase_1.GetInterviewerFeedbackByIdUseCase(feedbackRepository);
const getUserRatingByBookingIdUseCase = new getUserRatingByBookingIdUseCase_1.GetUserRatingByBookingIdUseCase(feedbackRepository);
const getInterviewerDashboardUseCase = new getInterviewerDashboardUseCase_1.GetInterviewerDashboardUseCase(bookingRepository, userRepository, feedbackRepository);
const changePasswordUseCase = new changePasswordUseCase_1.ChangePasswordUseCase(userRepository);
const deleteAccountUseCase = new deleteAccountUseCase_1.DeleteAccountUseCase(userRepository, interviewerRespository);
const interviewerController = new interviewer_controller_1.InterviewerController(submitVerificationUseCase, getVerificationStatusUseCase, getInterviewerProfileUseCase, updateInterviewerProfileUseCase, saveSlotRuleUseCase, getSlotRuleUseCase, getInterviewerBookingsUseCase, getWalletSummaryUseCase, listWalletTransactionsUseCase, submitFeedbackUseCase, listInterviewerFeedbacksUseCase, getInterviewerFeedbackByIdUseCase, getUserRatingByBookingIdUseCase, getInterviewerDashboardUseCase, changePasswordUseCase, deleteAccountUseCase, notificationPublisher_1.NotificationPublisher);
router.post('/submit-verification', combinedUpload_1.uploadFields, combinedUpload_1.handleCombinedUploads, (req, res) => interviewerController.submitVerification(req, res));
router.get('/verification-status', (req, res) => interviewerController.getVerificationStatus(req, res));
router.put('/change-password', (req, res) => interviewerController.changePassword(req, res));
router.delete('/delete', (req, res) => interviewerController.deleteAccount(req, res));
router.get('/profile', (req, res) => interviewerController.getProfile(req, res));
router.put('/profile', combinedUpload_1.uploadFields, combinedUpload_1.handleCombinedUploads, (req, res) => interviewerController.updateProfile(req, res));
router.get('/dashboard', (req, res) => interviewerController.getDashboard(req, res));
router.post('/slot-rules', (req, res) => interviewerController.saveSlotRule(req, res));
router.get('/slot-rules', (req, res) => interviewerController.getSlotRule(req, res));
router.get('/bookings', (req, res) => interviewerController.getBookings(req, res));
router.get('/wallet/summary', (req, res) => interviewerController.getSummary(req, res));
router.get('/wallet/transactions', (req, res) => interviewerController.getTransactions(req, res));
router.post('/feedback', (req, res) => interviewerController.submitFeedback(req, res));
router.get('/feedback', (req, res) => interviewerController.listFeedbacks(req, res));
router.get('/feedback/:id', (req, res) => interviewerController.getFeedbackById(req, res));
router.get('/rating/:bookingId', (req, res) => interviewerController.getUserRatingByBookingId(req, res));
exports.default = router;

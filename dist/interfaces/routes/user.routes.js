"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userRepository_1 = require("../../infrastructure/database/repositories/userRepository");
const getUserProfileUseCase_1 = require("../../application/use-cases/user/getUserProfileUseCase");
const updateUserProfileUseCase_1 = require("../../application/use-cases/user/updateUserProfileUseCase");
const getAllInterviewersUseCase_1 = require("../../application/use-cases/user/getAllInterviewersUseCase");
const getInterviewerByIdUseCase_1 = require("../../application/use-cases/user/getInterviewerByIdUseCase");
const generateAvailableSlotsUseCase_1 = require("../../application/use-cases/user/generateAvailableSlotsUseCase");
const createBookingUseCase_1 = require("../../application/use-cases/user/createBookingUseCase");
const getUserBookingsUseCase_1 = require("../../application/use-cases/user/getUserBookingsUseCase");
const createRazorpayOrderUseCase_1 = require("../../application/use-cases/user/createRazorpayOrderUseCase");
const cancelBookingUseCase_1 = require("../../application/use-cases/user/cancelBookingUseCase");
const getWalletSummaryUseCase_1 = require("../../application/use-cases/wallet/getWalletSummaryUseCase");
const listWalletTransactionsUseCase_1 = require("../../application/use-cases/wallet/listWalletTransactionsUseCase");
const user_controller_1 = require("../controllers/user/user.controller");
const authMiddleware_1 = require("../middleware/authMiddleware");
const roleMiddleware_1 = require("../middleware/roleMiddleware");
const combinedUpload_1 = require("../middleware/combinedUpload");
const slotRuleRepository_1 = require("../../infrastructure/database/repositories/slotRuleRepository");
const bookingRepository_1 = require("../../infrastructure/database/repositories/bookingRepository");
const walletRepository_1 = require("../../infrastructure/database/repositories/walletRepository");
const completeBookingUseCase_1 = require("../../application/use-cases/user/completeBookingUseCase");
const feedbackRepository_1 = require("../../infrastructure/database/repositories/feedbackRepository");
const listUserFeedbacksUseCase_1 = require("../../application/use-cases/user/listUserFeedbacksUseCase");
const getUserFeedbackByIdUseCase_1 = require("../../application/use-cases/user/getUserFeedbackByIdUseCase");
const listInterviewerRatingsUseCase_1 = require("../../application/use-cases/user/listInterviewerRatingsUseCase");
const submitInterviewerRatingUseCase_1 = require("../../application/use-cases/user/submitInterviewerRatingUseCase");
const getInterviewerRatingByBookingIdUseCase_1 = require("../../application/use-cases/user/getInterviewerRatingByBookingIdUseCase");
const getUserPaymentHistoryUseCase_1 = require("../../application/use-cases/user/getUserPaymentHistoryUseCase");
const getUserDashboardUseCase_1 = require("../../application/use-cases/user/getUserDashboardUseCase");
const changePasswordUseCase_1 = require("../../application/use-cases/auth/changePasswordUseCase");
const deleteAccountUseCase_1 = require("../../application/use-cases/auth/deleteAccountUseCase");
const verifyPaymentUseCase_1 = require("../../application/use-cases/user/verifyPaymentUseCase");
const interviewerRepository_1 = require("../../infrastructure/database/repositories/interviewerRepository");
const notificationPublisher_1 = require("../socket/notificationPublisher");
const getInterviewerProfileUseCase_1 = require("../../application/use-cases/interviewer/getInterviewerProfileUseCase");
const router = express_1.default.Router();
router.use(authMiddleware_1.authenticateToken, roleMiddleware_1.requireUser);
const userRepository = new userRepository_1.UserRepository();
const interviewerRepository = new interviewerRepository_1.InterviewerRepository();
const slotRuleRepository = new slotRuleRepository_1.SlotRuleRepository();
const bookingRepository = new bookingRepository_1.BookingRepository();
const walletRepository = new walletRepository_1.WalletRepository();
const feedbackRepository = new feedbackRepository_1.FeedbackRepository();
const getUserProfileUseCase = new getUserProfileUseCase_1.GetUserProfileUseCase(userRepository);
const updateUserProfileUseCase = new updateUserProfileUseCase_1.UpdateUserProfileUseCase(userRepository);
const getAllInterviewersUseCase = new getAllInterviewersUseCase_1.GetAllInterviewerUseCase(userRepository);
const getInterviewerByIdUseCase = new getInterviewerByIdUseCase_1.GetInterviewerByIdUseCase(userRepository);
const generateAvailableSlotsUseCase = new generateAvailableSlotsUseCase_1.GenerateAvailableSlotsUseCase(slotRuleRepository, bookingRepository);
const createBookingUseCase = new createBookingUseCase_1.CreateBookingUseCase(bookingRepository, userRepository, walletRepository);
const getUserBookingsUseCase = new getUserBookingsUseCase_1.GetUserBookingsUseCase(bookingRepository, userRepository);
const createRazorpayOrderUseCase = new createRazorpayOrderUseCase_1.CreateRazorpayOrderUseCase();
const cancelBookingUseCase = new cancelBookingUseCase_1.CancelBookingUseCase(bookingRepository, userRepository, walletRepository);
const getWalletSummaryUseCase = new getWalletSummaryUseCase_1.GetWalletSummaryUseCase(walletRepository);
const listWalletTransactionsUseCase = new listWalletTransactionsUseCase_1.ListWalletTransactionsUseCase(walletRepository);
const completeBookingUseCase = new completeBookingUseCase_1.CompleteBookingUseCase(bookingRepository);
const listUserFeedbacksUseCase = new listUserFeedbacksUseCase_1.ListUserFeedbacksUseCase(feedbackRepository);
const getUserFeedbackByIdUseCase = new getUserFeedbackByIdUseCase_1.GetUserFeedbackByIdUseCase(feedbackRepository);
const submitInterviewerRatingUseCase = new submitInterviewerRatingUseCase_1.SubmitInterviewerRatingUseCase(feedbackRepository, bookingRepository);
const getInterviewerRatingByBookingIdUseCase = new getInterviewerRatingByBookingIdUseCase_1.GetInterviewerRatingByBookingIdUseCase(feedbackRepository);
const listInterviewerRatingsUseCase = new listInterviewerRatingsUseCase_1.ListInterviewerRatingsUseCase(feedbackRepository);
const getUserPaymentHistoryUseCase = new getUserPaymentHistoryUseCase_1.GetUserPaymentHistoryUseCase(bookingRepository, userRepository);
const getUserDashboardUseCase = new getUserDashboardUseCase_1.GetUserDashboardUseCase(bookingRepository, userRepository, feedbackRepository);
const changePasswordUseCase = new changePasswordUseCase_1.ChangePasswordUseCase(userRepository);
const deleteAccountUseCase = new deleteAccountUseCase_1.DeleteAccountUseCase(userRepository, interviewerRepository);
const verifyPaymentUseCase = new verifyPaymentUseCase_1.VerifyPaymentUseCase(bookingRepository, userRepository, walletRepository);
const getInterviewerProfileUseCase = new getInterviewerProfileUseCase_1.GetInterviewerProfileUseCase(userRepository, interviewerRepository);
const userController = new user_controller_1.UserController(getUserProfileUseCase, updateUserProfileUseCase, getAllInterviewersUseCase, getInterviewerByIdUseCase, generateAvailableSlotsUseCase, createBookingUseCase, getUserBookingsUseCase, createRazorpayOrderUseCase, cancelBookingUseCase, getWalletSummaryUseCase, listWalletTransactionsUseCase, completeBookingUseCase, listUserFeedbacksUseCase, getUserFeedbackByIdUseCase, getInterviewerProfileUseCase, listInterviewerRatingsUseCase, submitInterviewerRatingUseCase, getInterviewerRatingByBookingIdUseCase, getUserPaymentHistoryUseCase, getUserDashboardUseCase, changePasswordUseCase, deleteAccountUseCase, verifyPaymentUseCase, notificationPublisher_1.NotificationPublisher);
router.get('/profile', (req, res) => userController.getProfile(req, res));
router.put('/profile', combinedUpload_1.uploadFields, combinedUpload_1.handleCombinedUploads, (req, res) => userController.updateProfile(req, res));
router.put('/change-password', (req, res) => userController.changePassword(req, res));
router.delete('/delete', (req, res) => userController.deleteAccount(req, res));
router.get('/dashboard', (req, res) => userController.getDashboard(req, res));
router.get('/interviewers', (req, res) => userController.getAllInterviewers(req, res));
router.get('/interviewers/:id', (req, res) => userController.getInterviewerById(req, res));
router.get('/interviewers/:id/ratings', (req, res) => userController.listInterviewerRatings(req, res));
router.get('/book-session/:id', (req, res) => userController.getAvailableSlots(req, res));
router.post('/bookings', (req, res) => userController.createBooking(req, res));
router.get('/bookings', (req, res) => userController.getUserBookings(req, res));
router.post('/razorpay/create-order', (req, res) => userController.createRazorpayOrder(req, res));
router.post('/razorpay/verify-payment', (req, res) => userController.verifyPayment(req, res));
router.post('/bookings/cancel', (req, res) => userController.cancelBooking(req, res));
router.get('/wallet/summary', (req, res) => userController.getWalletSummary(req, res));
router.get('/wallet/transactions', (req, res) => userController.getWalletTransactions(req, res));
router.post('/bookings/complete', (req, res) => userController.completeBooking(req, res));
router.get('/feedback', (req, res) => userController.listFeedbacks(req, res));
router.get('/feedback/:id', (req, res) => userController.getFeedbackById(req, res));
router.post('/rating', (req, res) => userController.submitInterviewerRating(req, res));
router.get('/rating/:bookingId', (req, res) => userController.getInterviewerRatingByBookingId(req, res));
router.get('/payments/history', (req, res) => userController.getPaymentHistory(req, res));
exports.default = router;

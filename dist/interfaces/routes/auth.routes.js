"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userRepository_1 = require("../../infrastructure/database/repositories/userRepository");
const signupUserUseCase_1 = require("../../application/use-cases/auth/signupUserUseCase");
const auth_controller_1 = require("../controllers/auth/auth.controller");
const verifyOtpUseCase_1 = require("../../application/use-cases/auth/verifyOtpUseCase");
const interviewerRepository_1 = require("../../infrastructure/database/repositories/interviewerRepository");
const loginUseCase_1 = require("../../application/use-cases/auth/loginUseCase");
const authMiddleware_1 = require("../middleware/authMiddleware");
const resendOtpUseCase_1 = require("../../application/use-cases/auth/resendOtpUseCase");
const emailService_1 = require("../../infrastructure/external/services/emailService");
const forgetPasswordUseCase_1 = require("../../application/use-cases/auth/forgetPasswordUseCase");
const resetPasswordUseCase_1 = require("../../application/use-cases/auth/resetPasswordUseCase");
const googleAuthUseCase_1 = require("../../application/use-cases/auth/googleAuthUseCase");
const notificationPublisher_1 = require("../socket/notificationPublisher");
const router = express_1.default.Router();
const emailService = new emailService_1.EmailService();
const userRepository = new userRepository_1.UserRepository();
const interviewerRepository = new interviewerRepository_1.InterviewerRepository();
const signupUserUseCase = new signupUserUseCase_1.SignupUserUseCase(userRepository, interviewerRepository, emailService);
const verifyOtpUseCase = new verifyOtpUseCase_1.VerifyOtpUseCase(userRepository);
const loginUseCase = new loginUseCase_1.LoginUseCase(userRepository);
const resendOtpUseCase = new resendOtpUseCase_1.ResendOtpUseCase(userRepository, emailService);
const forgetPasswordUseCase = new forgetPasswordUseCase_1.ForgetPasswordUseCase(userRepository, emailService);
const resetPasswordUseCase = new resetPasswordUseCase_1.ResetPasswordUseCase(userRepository);
const googleAuthUseCase = new googleAuthUseCase_1.GoogleAuthUseCase(userRepository, interviewerRepository);
const authController = new auth_controller_1.AuthController(signupUserUseCase, verifyOtpUseCase, loginUseCase, resendOtpUseCase, forgetPasswordUseCase, resetPasswordUseCase, googleAuthUseCase, notificationPublisher_1.NotificationPublisher);
router.post('/refresh', (req, res) => authController.refreshToken(req, res));
router.post('/signup', (req, res) => authController.signupUser(req, res));
router.post('/verify-otp', (req, res) => authController.verifyOtp(req, res));
router.post('/resend-otp', (req, res) => authController.resendOtp(req, res));
router.post('/login', (req, res) => authController.login(req, res));
router.post('/forgot-password', (req, res) => authController.forgetPassword(req, res));
router.post('/reset-password', (req, res) => authController.resetPassword(req, res));
router.post('/logout', (req, res) => authController.logout(req, res));
router.post('/google', (req, res) => { authController.googleLogin(req, res); });
router.post('/google/select-role', authMiddleware_1.authenticateToken, (req, res) => authController.selectRole(req, res));
exports.default = router;
